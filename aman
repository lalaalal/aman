#!/usr/bin/python

import os
import sys
import json
from os import name
import requests
from bs4 import BeautifulSoup


class AurVersionManager:
    def __init__(self):
        self.VERSION_FILE_PATH = "/usr/local/share/aur/versions.json"
        if not os.path.exists(self.VERSION_FILE_PATH):
            with open(self.VERSION_FILE_PATH, "w") as version_file:
                version_file.write("[]")
        with open(self.VERSION_FILE_PATH) as version_file:
            self.version_data = json.load(version_file)

    def set(self, name, version):
        self.remove(name)
        item = {"name": name, "version": version}
        self.version_data.append(item)
        self.save()

    def remove(self, name):
        for i in range(0, len(self.version_data)):
            item = self.version_data[i]
            if item["name"] == name:
                self.version_data.pop(i)
        self.save()

    def save(self):
        with open(self.VERSION_FILE_PATH, "w") as version_file:
            json.dump(self.version_data, version_file)


class AurManager:
    def __init__(self):
        self.AUR_URL = "https://aur.archlinux.org"
        self.SEARCH_URL = self.AUR_URL + "/packages/?K="
        self.AUR_PATH = "/usr/local/share/aur"
        if not os.path.exists(self.AUR_PATH):
            os.makedirs(self.AUR_PATH)
        self.aurVersionManager = AurVersionManager()

    def search(self, name):
        url = self.SEARCH_URL + name
        html = requests.get(url)
        soup = BeautifulSoup(html.text, 'html.parser')
        names = soup.body.table.select("tr td:first-child a")
        versions = soup.body.table.select("tr td:nth-child(2)")

        list = []
        for i in range(0, len(names)):
            item = {"name": names[i].text, "version": versions[i].text}
            list.append(item)

        return list

    def print_list(self, list):
        i = 0
        for item in list:
            print("[{index}] {name} {version}".format(
                index=i, name=item["name"], version=item["version"]))
            i += 1

    def select(self, list):
        self.print_list(list)
        selected_index = int(
            input("Select ({cancel} to cancel): ".format(cancel=len(list))))
        if (selected_index >= len(list)):
            exit(-1)
        return list[selected_index]

    def install(self, item):
        name = item["name"]
        version = item["version"]
        url = self.AUR_URL + "/" + name

        print("\nInstalling {name}...".format(name=name))
        os.chdir(self.AUR_PATH)
        os.system("git clone " + url)
        os.chdir(name)
        os.system("makepkg -s")
        os.system("find . -name *.zst -exec sudo pacman -U {} +")
        self.aurVersionManager.set(name, version)

    def get_new_version(self, item):
        html = requests.get(self.AUR_URL + "/packages/" + item["name"])
        soup = BeautifulSoup(html.text, "html.parser")
        title = soup.body.select("#pkgdetails h2")[0].text
        pieces = title.split(" ")
        new_version = pieces[len(pieces) - 1]

        return new_version

    def update(self, item):
        print("Checking update for " + item["name"], end="...", flush=True)
        new_version = self.get_new_version(item)
        if new_version == item["version"]:
            print(" Up to date", flush=True)
            return
        os.chdir(self.AUR_PATH)
        os.system("rm -rf " + item["name"])
        item["version"] = new_version
        self.install(item)

    def update_all(self):
        list = self.aurVersionManager.version_data
        for item in list:
            self.update(item)

    def remove(self, item):
        os.chdir(self.AUR_PATH)
        os.system("rm -rf " + item["name"])
        os.system("sudo pacman -R " + item["name"])
        self.aurVersionManager.remove(item["name"])

    def show_aurs(self):
        self.print_list(self.aurVersionManager.version_data)


def help():
    print("aman [*ACTION] [PKG NAME]")
    print("\tsearch  [*PKG NAME]")
    print("\tinstall [*PKG NAME]")
    print("\tupdate")
    print("\tshow")
    print("\tremove")


if len(sys.argv) == 1:
    help()
    exit(-1)

aurManager = AurManager()
action = sys.argv[1]

if action == "search":
    name = sys.argv[2]
    list = aurManager.search(name)
    aurManager.print_list(list)
elif action == "install":
    name = sys.argv[2]
    list = aurManager.search(name)
    item = aurManager.select(list)
    aurManager.install(item)
elif action == "show":
    aurManager.show_aurs()
elif action == "update":
    aurManager.update_all()
elif action == "remove":
    list = aurManager.aurVersionManager.version_data
    item = aurManager.select(list)
    aurManager.remove(item)
else:
    help()
